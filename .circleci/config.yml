version: 2.1

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files in the current S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current AWS CloudFormation stacks
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            fi
          when: on_fail


  revert-migration:
    description: Revert the latest migration
    steps:
      - run:
          name: Get the public ip of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_ip)
            echo ${PUBLIC_IP}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_IP} >> ./inventory
            cat ./inventory
          when: on_fail
      - add_ssh_keys:
          fingerprints: ["f8:a4:ad:7c:d1:11:c1:a4:ac:a2:ca:94:f7:0e:ae:43"] 
      - run:
          name: Revert the last migration
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory rollback.yml
          when: on_fail

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test the code
          command: |
            cd frontend
            npm run test

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test the code
          command: |
            cd backend
            npm run test
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
     
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend*" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo ${BACKEND_AWS_PUBLIC_IP}        
      - destroy-environment
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters "Name=tag:Name,Values=backend*" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo ${PUBLIC_IP}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_IP} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["58:1f:66:92:78:4e:4b:c5:bd:c9:52:38:f7:c4:8a:17"] 
      - run:
          name: Configure server via ansible to deploy the backend
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy.yml
      - revert-migration
      - destroy-environment
    
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Build the frontend
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters "Name=tag:Name,Values=backend*" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo ${PUBLIC_IP}
            export API_URL="http://${PUBLIC_IP}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-environment
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters "Name=tag:Name,Values=backend*" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo ${PUBLIC_IP}
            if curl -s "http://${PUBLIC_IP}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 0
            fi
      - revert-migration
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure
      - deploy-backend:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [deploy-backend]
      - smoke-test:
          requires: [deploy-frontend]





